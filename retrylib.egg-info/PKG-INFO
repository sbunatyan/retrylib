Metadata-Version: 1.1
Name: retrylib
Version: 0.0.0
Summary: Retries library
Home-page: UNKNOWN
Author: Sergey Bunatyan
Author-email: sergey.bunatyan@gmail.com
License: UNKNOWN
Description: Library to make you services reliable
        =====================================
        
        Retry on specific exception
        ---------------------------
        
          import retries
        
          @retries.decorators.retry(attempts_number=3,
                                    retry_on=(MyException,))
          def reliable_function():
              raise MyException()
        
        
        Specific function to make desicion about retries
        ------------------------------------------------
        
          import retries
        
          def is_my_mistake(error):
              return isinstance(error, MyMistake)
        
          @retries.decorators.retry(attempts_number=3,
                                    retry_on=is_my_mistake)
          def reliable_function():
              raise MyMistake()
        
        
        Retry on network errors
        -----------------------
        
        You can use following code to add retries for your custom network
        function:
        
          import requests
          import retries
        
          @retries.network.retry()
          def reliable_function():
             response = requests.get('http://localhost:5002')
             response.raise_for_status()
             return response
        
          print reliable_function()
        
        
        Logging
        =======
        
        Global logger
        -------------
        
        You can pass specific logger to decorator:
        
          import logging
          import logging.config
        
          LOGGING = {
              'version': 1,
              'formatters': {
                  'precise': {
                      'datefmt': '%Y-%m-%d,%H:%M:%S',
                      'format': '%(levelname)-7s %(asctime)15s '
                                '%(name)s:%(lineno)d %(message)s'
                  }
              },
              'handlers': {
                  'console': {
                      'class': 'logging.StreamHandler',
                      'formatter': 'precise',
                      'stream': 'ext://sys.stderr'
                  },
              },
              'root': {
                  'level': 'INFO',
                  'handlers': ['console']
              }
          }
        
          logging.config.dictConfig(LOGGING)
        
          LOGGER = logging.getLogger(__name__)
        
          @retries.network.retry(logger=LOGGER)
          def reliable_function():
             response = requests.get('http://localhost:5002')
             response.raise_for_status()
             return response
        
        
        Object-specific logger
        ----------------------
        
        If you define method 'get_logger' and decorate some method with retry
        decorator will be used object-specific logger:
        
          class MyClass(object):
             def __init__(self):
                 self._logger = logging.getLogger(__name__)
        
             def get_logger(self):
                 return self._logger
        
             @retries.network.retry()
             def reliable_method(self):
                 pass
        
          obj = MyClass()
          obj.reliable_method()
          # obj._logger will be used to write warnings about retries
        
        
Platform: UNKNOWN
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Operating System :: POSIX :: Linux
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.7
